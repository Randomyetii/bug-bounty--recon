#!/bin/bash

# Report Aggregation and Generation Module
# Author: Dhananjay Jha

set -euo pipefail

TARGET="$1"
OUTPUT_DIR="$2"

source "$(dirname "$0")/../config/config.sh"
source "$(dirname "$0")/utils.sh"

log "INFO" "Generating comprehensive reports for $TARGET"

cd "$OUTPUT_DIR" || exit 1

# Ensure reports directory exists
mkdir -p reports

# Collect statistics
TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
SUBDOMAINS=$(wc -l < raw/all_subdomains.txt 2>/dev/null || echo 0)
IPS=$(wc -l < raw/unique_ips.txt 2>/dev/null || echo 0)
LIVE_IPS=$(wc -l < raw/live_ips.txt 2>/dev/null || echo 0)
HTTP_ENDPOINTS=$(wc -l < raw/httpx_results.txt 2>/dev/null || echo 0)
VULNERABILITIES=$(wc -l < raw/nuclei_all_results.txt 2>/dev/null || echo 0)
CRITICAL_VULNS=$(wc -l < raw/nuclei_critical.txt 2>/dev/null || echo 0)
HIGH_VULNS=$(wc -l < raw/nuclei_high.txt 2>/dev/null || echo 0)
MEDIUM_VULNS=$(wc -l < raw/nuclei_medium.txt 2>/dev/null || echo 0)

log "INFO" "Aggregating data: $SUBDOMAINS subdomains, $IPS IPs, $HTTP_ENDPOINTS HTTP endpoints, $VULNERABILITIES vulnerabilities"

# Generate CSV Report
if [[ "${ENABLE_CSV_REPORT:-true}" == "true" ]]; then
    log "INFO" "Generating CSV report..."
    
    # Main summary CSV
    cat > reports/recon_summary.csv << EOF
Metric,Value
Target Domain,$TARGET
Scan Date,$TIMESTAMP
Total Subdomains,$SUBDOMAINS
Unique IP Addresses,$IPS
Live IP Addresses,$LIVE_IPS
HTTP Endpoints,$HTTP_ENDPOINTS
Total Vulnerabilities,$VULNERABILITIES
Critical Vulnerabilities,$CRITICAL_VULNS
High Vulnerabilities,$HIGH_VULNS
Medium Vulnerabilities,$MEDIUM_VULNS
EOF
    
    # Detailed findings CSV
    echo "Subdomain,IP Address,HTTP Status,Technology,Server,Vulnerabilities" > reports/detailed_findings.csv
    
    # Merge subdomain, IP, and HTTP data
    if [[ -f raw/subdomain_ip_mapping.txt ]] && [[ -f raw/httpx_results.txt ]]; then
        while IFS=',' read -r subdomain ip; do
            http_info=$(grep "^https\?://$subdomain" raw/httpx_results.txt 2>/dev/null | head -1 || echo "")
            if [[ -n "$http_info" ]]; then
                status=$(echo "$http_info" | awk '{print $2}')
                tech=$(echo "$http_info" | grep -oE '\[.*\]' | tr -d '[]' | tr ',' ';' || echo "")
                server=$(echo "$http_info" | grep -oE 'Server: [^]]*' | cut -d' ' -f2- || echo "")
                vulns=$(grep "$subdomain" raw/nuclei_all_results.txt 2>/dev/null | wc -l || echo 0)
                echo "\"$subdomain\",\"$ip\",\"$status\",\"$tech\",\"$server\",\"$vulns\"" >> reports/detailed_findings.csv
            else
                echo "\"$subdomain\",\"$ip\",\"No HTTP\",\"\",\"\",\"0\"" >> reports/detailed_findings.csv
            fi
        done < raw/subdomain_ip_mapping.txt
    fi
    
    log "SUCCESS" "CSV reports generated"
fi

# Generate Markdown Report
if [[ "${ENABLE_MARKDOWN_REPORT:-true}" == "true" ]]; then
    log "INFO" "Generating Markdown report..."
    
    cat > reports/recon_report.md << EOF
# Bug Bounty Reconnaissance Report

## Target: $TARGET
**Scan Date:** $TIMESTAMP  
**Generated by:** Industry-Grade Recon Pipeline

---

## Executive Summary

| Metric | Count |
|--------|-------|
| Total Subdomains Discovered | $SUBDOMAINS |
| Unique IP Addresses | $IPS |
| Live IP Addresses | $LIVE_IPS |
| HTTP Endpoints Found | $HTTP_ENDPOINTS |
| Total Vulnerabilities | $VULNERABILITIES |
| **Critical Vulnerabilities** | **$CRITICAL_VULNS** |
| **High Vulnerabilities** | **$HIGH_VULNS** |
| Medium Vulnerabilities | $MEDIUM_VULNS |

---

## Key Findings

### 🎯 Attack Surface
- **$SUBDOMAINS** subdomains provide potential entry points
- **$LIVE_IPS** IP addresses are actively responding
- **$HTTP_ENDPOINTS** web services are accessible

### 🚨 Security Risk Assessment
EOF

    # Add risk assessment based on findings
    if [[ $CRITICAL_VULNS -gt 0 ]]; then
        echo "- **HIGH RISK**: $CRITICAL_VULNS critical vulnerabilities require immediate attention" >> reports/recon_report.md
    fi
    
    if [[ $HIGH_VULNS -gt 0 ]]; then
        echo "- **MEDIUM-HIGH RISK**: $HIGH_VULNS high severity issues found" >> reports/recon_report.md
    fi
    
    if [[ $VULNERABILITIES -eq 0 ]]; then
        echo "- **LOW RISK**: No automated vulnerabilities detected (manual testing recommended)" >> reports/recon_report.md
    fi

    cat >> reports/recon_report.md << EOF

---

## Technical Details

### Subdomain Discovery
\`\`\`
Total Discovered: $SUBDOMAINS
Resolution Success Rate: $((IPS * 100 / SUBDOMAINS))%
\`\`\`

### Infrastructure Analysis
EOF

    # Add top technologies if available
    if [[ -f raw/technologies.txt ]]; then
        echo "### Top Technologies Detected" >> reports/recon_report.md
        echo '```' >> reports/recon_report.md
        head -10 raw/technologies.txt >> reports/recon_report.md
        echo '```' >> reports/recon_report.md
    fi
    
    # Add top ports if available
    if [[ -f raw/port_summary.txt ]]; then
        echo "### Most Common Open Ports" >> reports/recon_report.md
        echo '```' >> reports/recon_report.md
        cut -d':' -f2 raw/port_summary.txt | tr ',' '\n' | sort | uniq -c | sort -nr | head -10 >> reports/recon_report.md
        echo '```' >> reports/recon_report.md
    fi
    
    # Add critical vulnerabilities if any
    if [[ -f raw/nuclei_critical.txt ]] && [[ -s raw/nuclei_critical.txt ]]; then
        echo "### 🔥 Critical Vulnerabilities" >> reports/recon_report.md
        echo '```' >> reports/recon_report.md
        head -20 raw/nuclei_critical.txt >> reports/recon_report.md
        echo '```' >> reports/recon_report.md
    fi
    
    cat >> reports/recon_report.md << EOF

---

## Recommendations

1. **Immediate Actions** (if critical vulnerabilities found):
   - Review and patch critical security issues
   - Implement security monitoring for affected endpoints

2. **Short-term Actions**:
   - Conduct manual security testing on high-value targets
   - Review subdomain exposure and disable unnecessary services
   - Implement proper access controls

3. **Long-term Actions**:
   - Regular security assessments
   - Implement bug bounty program monitoring
   - Security awareness training for development teams

---

## Methodology

This reconnaissance was performed using industry-standard tools:
- **Amass**: Subdomain enumeration
- **Masscan**: High-speed port scanning  
- **Nmap**: Service fingerprinting
- **Httpx**: HTTP service discovery
- **Nuclei**: Vulnerability detection

**Scan Coverage**: Ports $PORTS at $MASSCAN_RATE pps
**Threads**: $HTTPX_THREADS (HTTP), $NUCLEI_THREADS (Nuclei)

---
*Report generated on $TIMESTAMP*
EOF

    log "SUCCESS" "Markdown report generated"
fi

# Generate JSON Report (machine-readable)
if [[ "${ENABLE_JSON_REPORT:-true}" == "true" ]]; then
    log "INFO" "Generating JSON report..."
    
    cat > reports/recon_data.json << EOF
{
  "target": "$TARGET",
  "scan_date": "$TIMESTAMP",
  "statistics": {
    "subdomains": $SUBDOMAINS,
    "unique_ips": $IPS,
    "live_ips": $LIVE_IPS,
    "http_endpoints": $HTTP_ENDPOINTS,
    "total_vulnerabilities": $VULNERABILITIES,
    "critical_vulnerabilities": $CRITICAL_VULNS,
    "high_vulnerabilities": $HIGH_VULNS,
    "medium_vulnerabilities": $MEDIUM_VULNS
  },
  "configuration": {
    "ports_scanned": "$PORTS",
    "masscan_rate": "$MASSCAN_RATE",
    "httpx_threads": "$HTTPX_THREADS",
    "nuclei_threads": "$NUCLEI_THREADS"
  }
}
EOF
    
    log "SUCCESS" "JSON report generated"
fi

# Create archive of all results
log "INFO" "Creating results archive..."
tar -czf "reports/${TARGET}_recon_$(date +%Y%m%d_%H%M%S).tar.gz" \
    raw/ reports/ logs/ 2>/dev/null || true

log "SUCCESS" "Results archive created"

# Final report summary
cat > reports/RESULTS_SUMMARY.txt << EOF
RECONNAISSANCE COMPLETED FOR $TARGET
====================================

Generated Reports:
EOF

if [[ "${ENABLE_CSV_REPORT:-true}" == "true" ]]; then
    echo "- CSV Report: reports/recon_summary.csv" >> reports/RESULTS_SUMMARY.txt
    echo "- Detailed CSV: reports/detailed_findings.csv" >> reports/RESULTS_SUMMARY.txt
fi

if [[ "${ENABLE_MARKDOWN_REPORT:-true}" == "true" ]]; then
    echo "- Markdown Report: reports/recon_report.md" >> reports/RESULTS_SUMMARY.txt
fi

if [[ "${ENABLE_JSON_REPORT:-true}" == "true" ]]; then
    echo "- JSON Data: reports/recon_data.json" >> reports/RESULTS_SUMMARY.txt
fi

echo "- Raw Data: raw/ directory" >> reports/RESULTS_SUMMARY.txt
echo "- Logs: logs/ directory" >> reports/RESULTS_SUMMARY.txt

cat >> reports/RESULTS_SUMMARY.txt << EOF

Key Metrics:
- Subdomains: $SUBDOMAINS
- Live IPs: $LIVE_IPS
- HTTP Endpoints: $HTTP_ENDPOINTS  
- Vulnerabilities: $VULNERABILITIES (Critical: $CRITICAL_VULNS, High: $HIGH_VULNS)

Next Steps:
1. Review the Markdown report for detailed findings
2. Prioritize critical and high vulnerabilities for immediate action
3. Use CSV data for further analysis or integration with other tools
4. Archive results securely for compliance and tracking
EOF

log "SUCCESS" "Report aggregation completed for $TARGET"

# Final notification
if [[ $CRITICAL_VULNS -gt 0 ]] || [[ $HIGH_VULNS -gt 0 ]]; then
    send_notification "⚠️  RECON COMPLETE - ACTION REQUIRED" "Found $CRITICAL_VULNS critical and $HIGH_VULNS high severity issues on $TARGET. Review reports immediately."
else
    send_notification "✅ Recon Complete" "Successfully scanned $TARGET: $SUBDOMAINS subdomains, $HTTP_ENDPOINTS endpoints, $VULNERABILITIES total findings."
fi

exit 0